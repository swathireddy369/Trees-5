// Time Complexity :O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach:Morris inorder traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        TreeNode curr=root;
        TreeNode prev;
        List<Integer> result=new ArrayList<>();
        while(curr != null){ 
            if(curr.left != null){
                prev=curr.left;
                while(prev.right != null && prev.right != curr){//until leaf
                    prev=prev.right;
                }
                if(prev.right == null){
                     prev.right=curr;//establishing connection between leaf node right as its parent
                     curr=curr.left;
                }
                if(prev.right == curr){
                     prev.right=null;//removing the connection which we established once the traversal is done 
                     result.add(curr.val);
                     curr=curr.right;
                }
            }else{
                 result.add(curr.val);
                 curr=curr.right;//left subtree is done adding curr to res and moving to root to processs right sub tree
            }
        }
       return result;
    }
}